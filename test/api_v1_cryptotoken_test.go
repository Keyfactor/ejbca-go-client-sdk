/*
EJBCA REST Interface

Testing V1CryptotokenApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ejbca

import (
	"context"
	openapiclient "github.com/Keyfactor/ejbca-go-client-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_ejbca_V1CryptotokenApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test V1CryptotokenApiService Activate1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cryptotokenName string

		httpRes, err := apiClient.V1CryptotokenApi.Activate1(context.Background(), cryptotokenName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1CryptotokenApiService Deactivate1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cryptotokenName string

		httpRes, err := apiClient.V1CryptotokenApi.Deactivate1(context.Background(), cryptotokenName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1CryptotokenApiService GenerateKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cryptotokenName string

		httpRes, err := apiClient.V1CryptotokenApi.GenerateKeys(context.Background(), cryptotokenName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1CryptotokenApiService RemoveKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cryptotokenName string
		var keyPairAlias string

		httpRes, err := apiClient.V1CryptotokenApi.RemoveKeys(context.Background(), cryptotokenName, keyPairAlias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1CryptotokenApiService Status5", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.V1CryptotokenApi.Status5(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
